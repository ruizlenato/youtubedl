//go:build ignore

package main

import (
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"strings"
)

type Client struct {
	Name          string `json:"NAME"`
	Version       string `json:"VERSION"`
	UserAgent     string `json:"USER_AGENT,omitempty"`
	DeviceModel   string `json:"DEVICE_MODEL,omitempty"`
	APIKey        string `json:"API_KEY,omitempty"`
	APIVersion    string `json:"API_VERSION,omitempty"`
	StaticVisitor string `json:"STATIC_VISITOR_ID,omitempty"`
	SuggestionExp string `json:"SUGG_EXP_ID,omitempty"`
	SDKVersion    int    `json:"SDK_VERSION,omitempty"`
}

type Data struct {
	Clients              map[string]Client                 `json:"CLIENTS"`
	ClientNameIDs        map[string]string                 `json:"CLIENT_NAME_IDS"`
	InnerTubeHeadersBase map[string]string                 `json:"INNERTUBE_HEADERS_BASE"`
	OAuth                map[string]map[string]interface{} `json:"OAUTH"`
	StreamHeaders        map[string]string                 `json:"STREAM_HEADERS"`
	SupportedClients     []string                          `json:"SUPPORTED_CLIENTS"`
	URLs                 struct {
		YTBase        string            `json:"YT_BASE"`
		YTMusicBase   string            `json:"YT_MUSIC_BASE"`
		YTSuggestions string            `json:"YT_SUGGESTIONS"`
		YTUpload      string            `json:"YT_UPLOAD"`
		API           map[string]string `json:"API"`
		GoogleSearch  string            `json:"GOOGLE_SEARCH_BASE"`
	} `json:"URLS"`
}

func main() {
	cmd := exec.Command("/usr/bin/env", "node", "generatejs/js/generate.mjs")
	output, err := cmd.Output()
	if err != nil {
		fmt.Println("Error running node command:", err)
		os.Exit(1)
	}

	var data Data
	if err := json.Unmarshal(output, &data); err != nil {
		fmt.Println("Error parsing JSON:", err)
		os.Exit(1)
	}

	var builder strings.Builder

	builder.WriteString(`// Code generated by generate.go; DO NOT EDIT.
package youtubedl

`)

	builder.WriteString("var Clients = map[string]YoutubeClient{\n")
	for key, client := range data.Clients {
		builder.WriteString(fmt.Sprintf(`    "%s": {
        Name: "%s",
        Version: "%s",
`, key, client.Name, client.Version))

		if client.UserAgent != "" {
			builder.WriteString(fmt.Sprintf(`        UserAgent: "%s",
`, client.UserAgent))
		}
		if client.DeviceModel != "" {
			builder.WriteString(fmt.Sprintf(`        DeviceModel: "%s",
`, client.DeviceModel))
		}
		if client.APIKey != "" {
			builder.WriteString(fmt.Sprintf(`        APIKey: "%s",
`, client.APIKey))
		}
		if client.APIVersion != "" {
			builder.WriteString(fmt.Sprintf(`        APIVersion: "%s",
`, client.APIVersion))
		}
		if client.StaticVisitor != "" {
			builder.WriteString(fmt.Sprintf(`        StaticVisitor: "%s",
`, client.StaticVisitor))
		}
		if client.SuggestionExp != "" {
			builder.WriteString(fmt.Sprintf(`        SuggestionExp: "%s",
`, client.SuggestionExp))
		}
		if client.SDKVersion != 0 {
			builder.WriteString(fmt.Sprintf(`        SDKVersion: %d,
`, client.SDKVersion))
		}

		builder.WriteString("    },\n")
	}
	builder.WriteString("}\n\n")

	builder.WriteString("var ClientNameIDs = map[string]string{\n")
	for key, value := range data.ClientNameIDs {
		builder.WriteString(fmt.Sprintf(`    "%s": "%s",
`, key, value))
	}
	builder.WriteString("}\n\n")

	builder.WriteString("var InnerTubeHeadersBase = map[string]string{\n")
	for key, value := range data.InnerTubeHeadersBase {
		builder.WriteString(fmt.Sprintf(`    "%s": "%s",
`, key, value))
	}
	builder.WriteString("}\n\n")

	builder.WriteString("var StreamHeaders = map[string]string{\n")
	for key, value := range data.StreamHeaders {
		builder.WriteString(fmt.Sprintf(`    "%s": "%s",
`, key, value))
	}
	builder.WriteString("}\n\n")

	builder.WriteString("var SupportedClients = []string{\n")
	for _, client := range data.SupportedClients {
		builder.WriteString(fmt.Sprintf(`    "%s",
`, client))
	}
	builder.WriteString("}\n\n")

	builder.WriteString("var URLs = struct {\n")
	builder.WriteString("    YTBase string\n")
	builder.WriteString("    YTMusicBase string\n")
	builder.WriteString("    YTSuggestions string\n")
	builder.WriteString("    YTUpload string\n")
	builder.WriteString("    API map[string]string\n")
	builder.WriteString("    GoogleSearch string\n")
	builder.WriteString("}{\n")
	builder.WriteString(fmt.Sprintf(`    YTBase: "%s",
    YTMusicBase: "%s",
    YTSuggestions: "%s",
    YTUpload: "%s",
    API: map[string]string{
`, data.URLs.YTBase, data.URLs.YTMusicBase, data.URLs.YTSuggestions, data.URLs.YTUpload))

	for key, value := range data.URLs.API {
		builder.WriteString(fmt.Sprintf(`        "%s": "%s",
`, key, value))
	}
	builder.WriteString("    },\n")
	builder.WriteString(fmt.Sprintf(`    GoogleSearch: "%s",
`, data.URLs.GoogleSearch))
	builder.WriteString("}\n")

	err = os.WriteFile("constants.go", []byte(builder.String()), 0644)
	if err != nil {
		fmt.Println("Error writing generated.go:", err)
		os.Exit(1)
	}
}
